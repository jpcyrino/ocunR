aricode::NID(D[3,],Dt[,1])
aricode::NID(D[4,],Dt[,1])
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
size(D)
dim(D)
aricode::NID(D[1,],D[,1])
apply(D,1,aricode::NID,c2=D[,1])
Dt <- cbind(D, D[,1])
D[,1] == D[,ncol(D)]
Dt[,1] <- Dt[,2]
Dt[,1] == Dt[,2]
eye(3)
ones(3)
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
install.packages("geosphere")
geosphere::distm(D)
dist(D)
D <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
d <- dist(as.matrix(D[,-1]))
d
d[1,1]
d <- as.matrix(d)
View(d)
heatmap
heatmap(d)
colnames(d) <- colnames(D[,-1])
View(d)
rownames(d) <- D[,1]
nrow(d)
D[,1]
rownames(d) <- as.character(D[,1])
rownames(d)
as.character(D[,1])
length(as.character(D[,1]))
length(as.vector(D[,1]))
D[,1]
D$i__
rownames(d) <- D$i__
View(d)
kmeans(d, centers=5)
K <- kmeans(d, centers=5)
K$cluster
cbind(D$i__,K$cluster)
L<-cbind(D$i__,K$cluster)
View(L)
install.packages("dbscan")
B <- dbscan::dbscan(d)
B <- dbscan::hdbscan(d,minPts=1)
B <- dbscan::hdbscan(d,minPts=2)
M <- cbind(D$i__,B$cluster)
View(M)
View(B)
plot(B$hc)
M <- cbind(D$i__,B$cluster,B$membership_prob)
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss,sentence.separators = TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss,sentence.separators = TRUE))
install.packages("Spectrum")
M <- Spectrum::(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE)))
M <- Spectrum::Spectrum(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE)))
M <- Spectrum::Spectrum(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))[,-1])
M$assignments
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
View(M)
phi(c(30,20,20,30))
D <- dist(M, method="binary")
D <- dist(M[,-1], method="binary")
d <- as.matrix(D)
View(d)
kmeans(d, centers=5)
kmeans(d, centers=5)$size
k <- kmeans(d, centers=8)$size
k <- kmeans(d, centers=8)
view(cbind(M[,1],k$cluster))
View(cbind(M[,1],k$cluster))
k$size
D <- dist(M[,-1], method="manhattan")
d <- as.matrix(D)
k <- kmeans(d, centers=8)
k$size
View(cbind(M[,1],k$cluster))
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE), binary=FALSE)
D <- dist(M[,-1], method="manhattan")
k <- kmeans(d, centers=8)
View(cbind(M[,1],k$cluster))
sum(c(.3*log(.3),.6*log(.6),.1*log(.1)))
sum(c(.8*log(.3),.1*log(.6),.1*log(.1)))
sum(c(.8*log(.3),.1*log(.6),.05*log(.05),.05*log(.05)))
sum(c(.8*log(.3),.1*log(.1),.05*log(.05),.05*log(.05)))
sum(c(.8*log(.3),.1*log(.1),.1*log(.1)))
sum(c(.5*log(.5),.5*log(.5)))
sum(c(.5*log(2,.5),.5*log(2,.5)))
H <- function(list){}
H <- function(list) -list*log(2,list)
H(c(.5,.5))
H(c(.5,.4,.1))
H <- function(list) sum(-list*log(2,list))
H(c(.5,.2,.3))
H(c(.5,.4,.1))
H(c(.6,.3,.1))
H(c(.25,.25,.25))
H(c(.25,.25,.25,.25))
H(c(.5,.5))
H <- function(list) -sum(list*log(2,list))
H(c(.25,.25,.25,.25))
H(c(.1))
H(c(1))
H(c(.8,.2))
H(c(.5,.5))
H(.5)
H(.25)
log(2,.5)
log(2,.25)
H <- function(list) -sum(list*log(list,2))
H(.5)
H(.5,.5)
H(c(.5,.5))
H(c(.3,.6,.1))
H(c(1/3,1/3,1/3))
H(c(.25,.25,.25,.25))
H(c(.8,.1,.05,.05))
H(c(.3,.1,.05,.05,.05,.05,.1,.1,.05,.05))
4*log(.25,2)/4
sum(log(.3,2),log(.6,2),log(.1,2))/3
-sum(log(.3,2),log(.6,2),log(.1,2))/3
2**-1*log(.5,2)
-2**-1*log(.5,2)
-2**-1*1
H <- function(l) {ent(l)}
H(5)
devtools::document()
devtools::document()
devtools::document()
M <- adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
M <- adjacency_matrix(bigrams(daai.chin$gloss))
View(M)
devtools::document()
devtools::install()
devtools::install()
devtools::install()
detach("fansi", unload=TRUE)
devtools::install()
devtools::load_all
()
devtools::load_all()
adjacency_matrix(bigrams(daai.chin$gloss))
M <- adjacency_matrix(bigrams(daai.chin$gloss))
M[1,] %*% M[2,]
M[1,] %*% M[3,]
M[1,] %*% M[4,]
View(M)
f <- apply(M,1,function(x) M[1,] %*% x)
max(f)
f==1
f[f==1]
f <- apply(M,1,function(x) sum(M[1,] &&  x))
max(f)
M[,1]
M[1,]
which(M[1,] ==1)
which(M[2,] ==1)
which(M[3,] ==1)
which(M[4,] ==1)
which(M[5,] ==1)
M[1,] && M[5,]
M[1,1] && M[5,1]
M[1,1] && M[5,2]
as.numeric(M[1,])
as.numeric(M[1,]) && as.numeric(M[5,])
as.numeric(M[5,])
c(1,1,1) && c(1,1,0)
M[1,1] & M[5,2]
as.numeric(M[1,]) & as.numeric(M[5,])
f <- apply(M,1,function(x) sum(M[1,] &  x))
max(f)
sum(M[1,] & M[1,])
sum(M[5,] & M[5,])
rownames(M)
g <- expand.grid(rownames(M),rownames(M))
View(g)
M['GEN']
M['GEN',]
M[g[1],]
M[g$Var1,]
M[M==g[,1],]
M[M==g[,1],] & M[M==g[,2],]
M[M==g[,1],] &*& M[M==g[,2],]
M[M==g[,1],]  %*%  M[M==g[,2],]
M[M==g[,1],]
M[M==g[,1]]
as.list(M)
lapply(seq(1,nrow(M)), function(x) M[x,])
L <- lapply(seq(1,nrow(M)), function(x) M[x,])
View(L)
names(L) <- rownames(M)
View(L)
L[[g[1,1]]]
L[[g[1,1]]] &*& L[[g[1,2]]]
L[[g[1,1]]] %*% L[[g[1,2]]]
L[[g[1,1]]] %*% L[[g[1,5]]]
L[[g[1,1]]] %*% L[[g[5,2]]]
L[[g[,1]]] %*% L[[g[,2]]]
L[[5]] %*% L[[6]]
L[[6]] %*% L[[6]]
D <- apply(M,1,sum())
D <- apply(M,1,sum)
D <- apply(M,1,function(x) x %*% M[6,])
D <- apply(M,1,function(x) x %*% M)
cbind()
class(cbind())
is.matrix(cbind())
T <- cbind()
T <- cbind(T,M[,1])
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
T <- kernel_distance(M)
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
T <- kernel_distance(M)
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
T <- kernel_distance(M)
View(`T`)
dim(T)
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
T <- kernel_distance(M)
pca <- prcomp(T)
View(pca)
pca(sdev[1:2]**2)
pca$sdev[1:2]**2
pca$sdev[1:10]**2
plot(pca$x[,1],pca$x[,2])
heatmap(T)
image(T)
m <- kmeans(T, centers=4)
cbind(rownames(M), m$cluster)
K <- cbind(rownames(M), m$cluster)
View(K)
install.packages("apcluster")
apcluster::apcluster(T)
P <- pca$x[,1:2]
plot(P)
apcluster::apcluster(P)
m <- kmeans(P, centers=5)
L <- cbind(rownames(M), m$cluster)
View(L)
hist(T[1,])
hist(T)
hist(T[5,]
)
m <- kmeans(P, centers=2)
L <- cbind(rownames(M), m$cluster)
m <- kmeans(P, centers=3)
L <- cbind(rownames(M), m$cluster)
m <- kmeans(P, centers=4)
L <- cbind(rownames(M), m$cluster)
m <- apcluster::apcluster(T)
View(m)
L <- cbind(rownames(M), m$idx)
L <- cbind(rownames(M), m@idx)
View(L)
m <- kmeans(P, centers=8)
L <- cbind(rownames(M), m$cluster)
source('C:/Users/lazza/github/ocunR/R/adjacency.R')
reticulate::source_python('C:/Users/lazza/github/ocunR/R/parser_palavras_dic.py')
View(wordcost)
english.lexicon <- as.vector(wordcost)
View(english.lexicon)
english.lexicon <- sapply(wordcost)
english.lexicon <- sapply(wordcost,function(x),x)
english.lexicon <- sapply(wordcost,function(x)x)
english.lexicon[1:10]
parse(english.lexicon,"iwantbeer")
parse(english.lexicon,"Iwantbeer")
parse(english.lexicon,"thefoxisnice")
parse(english.lexicon,"youwantbeer")
parse(english.lexicon,"Iwill")
parse(english.lexicon,"iwill")
parse(english.lexicon,"hewillcome")
parse(english.lexicon,"theveryunfortunateoccasionthatheputsaspell")
parse(english.lexicon,"letmeloveyoulikeialwaysdid")
parse(english.lexicon,"acataisagiftfromgod")
parse(english.lexicon,"acatisagiftfromgod")
source('C:/Users/lazza/github/ocunR/R/cchunker_parser.R')
parse(english.lexicon,"acatisagiftfromgod")
source('C:/Users/lazza/github/ocunR/R/cchunker_parser.R')
source('C:/Users/lazza/github/ocunR/R/cchunker_parser.R')
parse(english.lexicon,"acatisagiftfromgod")
parse(english.lexicon,"welivetogether")
parse(english.lexicon,"iwantsomecandy")
lexicon.english <- english.lexicon
usethis::use_data(lexicon.english)
usethis::use_data(lexicon.english)
usethis::use_data(lexicon.english)
usethis::use_data(lexicon.english, overwrite=TRUE)
devtools::document()
rm(list = c("parse", "words"))
devtools::document()
lexicon.english
?lexicon.english
fastmix
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
T <- ksm(M)
BIC <- mclust::mclustBIC(T)
plot(BIC)
mdl <- mclust::Mclust(T, BIC)
mdl <- mclust::Mclust(T, x=BIC)
library(mclust)
mdl <- mclust::Mclust(T, x=BIC)
View(mdl)
summary(mdl)
L <- cbind(rownames(M), mdl$classification, mdl$uncertainty)
View(L)
L <- cbind(rownames(M), kmeans(T, centers=4)$cluster)
mtcars
apply(mtcars,2,function(x) 2*x)
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
L <- kmeans(M,centers=4)$cluster
rownames(L) <- rownames(M)
names(L) <- rownames(M)
B <- bigrams(daai.chin$gloss, sentence.separators=TRUE)
C <- apply(B,2,function(x) 1)
C <- apply(B,2,function(x) x)
C <- apply(B,2, function(x) L[x])
View(C)
View(B)
View(C)
View(B)
View(C)
table(C)
plot(C[,1],C[,2])
C <- as.factor(C)
C <- apply(B,2, function(x) L[x])
F <- as.dataframe(C)
F <- as.data.frame(C)
F$i__ <- as.factor(F$i__)
F$j__ <- as.factor(F$j__)
View(`F`)
table(F)
heatmap(table(F))
L[L==2]
L[L==4]
D <- morphs(daai.chin)
D <- morphs(daai.chin$language)
table(D)
d <- table(D)
max(d)
names(d)
sort(d)
hist(d)
sum(d)
hist(d/sum(d))
hist(log(d/sum(d),2))
log(c(1:length(d))*log(length(D),2),2)
lexicon.daaichin <- log(c(1:length(d))*log(length(D),2),2)
names(lexicon.daaichin) <- names(d)
names(lexicon.daaichin) <- names(sort(d,decreasing=TRUE))
names(lexicon.daaichin)
which(max(d))
which(d==max(d))
which(d==min(d))
which(d==min(lexicon.daaichin))
which(lexicon.daaichin==min(lexicon.daaichin))
which(lexicon.daaichin==max(lexicon.daaichin))
daai.chin$language[1]
parse(lexicon.daaichin,"kaamnglaamxangÃ¼")
parse(lexicon.daaichin,"kaam")
parse(lexicon.daaichin,"xakanglaam")
hist(lexicon.daaichin)
hist(lexicon.english)
devtools::document()
usethis::use_data(lexicon.daaichin)
devtools::document()
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
L <- lexicon(morphs(daai.chin$language, sentence.separators = FALSE))
Dm <- morphs(daai.chin$language)
Dm <- morphs(daai.chin$language, sentence.separators = FALSE)
Dm <- table(Dm)
Dm <- sort(table(Dm), decreasing=TRUE)
Dm
Dm <- table(Dm)
sort(Dm, decreasing=TRUE)
Dm <- morphs(daai.chin$language, sentence.separators = FALSE)
Dm <- table(Dm)
sort(Dm, decreasing=TRUE)
length(sort(Dm, decreasing=TRUE))
devtools::load_all()
L <- lexicon(daai.chin$language)
L <- lexicon(morphs(daai.chin$language))
min(L)
which(L==min(L))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
L == lexicon.daaichin
sum(L == lexicon.daaichin)
L <- lexicon(morphs(daai.chin$language),zipf=FALSE)
L
min(L)
max(L)
sort(L, decreasing=TRUE))
sort(L, decreasing=TRUE)
sort(L)
lexicon.daaichin == sort(L)
sum(lexicon.daaichin == sort(L))
abs(lexicon.daaichin - sort(L))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
mean(L==lexicon.daaichin)
D <- lexicon(morphs(daai.chin$language),zipf=FALSE)
mean(L==D)
D <- morphs(daai.chin$language)
sapply(D, function(x) sum(x))
sapply(D, function(x) sum(x==x))
sapply(D, function(x) sum(D==x))
max(sapply(D, function(x) sum(D==x)))
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
adjacency_matrix((bigrams(daai.chin$gloss, sentence.separators=TRUE)))
D <- adjacency_matrix((bigrams(daai.chin$gloss, sentence.separators=TRUE)))
L <- lexicon(morphs(daai.chin$gloss))
hist(L)
sum(L < 10)
sum(L < 12)
sum(L < 10)
which(L < 10)
names(which(L < 10))
D[,-names(which(L<10))]
D[,-1]
which(L <10)
names(which(L <10))
colnames(D) == names(which(L<10))
which(colnames(D) == names(which(L<10)))
colnames(D)
colnames(D)['NON']
colnames(D) == names(L)
which(colnames(D) == 'NON')
which(colnames(D) == names(L)[1])
which(colnames(D) == names(which(L<10))[1])
which(colnames(D) == names(which(L<10))[10])
which(colnames(D) == names(which(L<10)))
match(colnames(D) == names(which(L<10)))
colnames(D)
colnames(D)['NON']
colnames(D)[colnames(D) == 'NON']
sapply(colnames(D), function(x) {if(x %in% names(L < 10)) return(x)})
R <- sapply(colnames(D), function(x) {if(x %in% names(L < 10)) return(x)})
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) return(x))
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) x); unlist()
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) return(x)); unlist()
intersect(colnames(D), mames(L <10))
intersect(colnames(D), names(L <10))
intersect(colnames(D), names(which(L < 10)))
R <- intersect(colnames(D), names(which(L < 10)))
D[,-R]
D[,R]
D2 <- D[,R]
View(D2)
dim(D2)
ksm(D2)
K <- ksm(D2)
kme <- kmeans(D, centers=5)$cluster
View(kme)
db <- dbscan::dbscan(D2,eps=200)
View(db$cluster)
db <- dbscan::dbscan(D2,eps=2)
View(db$cluster)
pca <- prcomp(D2)
kme <- kmeans(D2, centers=5)$cluster
View(kme)
plot(pca$x[,1:2])
plot(pca$x[,1:3])
plot(pca$x[,2:3])
kme <- kmeans(pca$x[,1:2], centers=5)
kme[1]
kme$cluster[1]
rownames(pca$x)
rownames(pca$x)[1]
final <- cbind(pca$x[,2], kme$cluster)
plot(final[,1],final[,2],colours=final[,3])
final <- cbind(pca$x[,1:2], kme$cluster)
plot(final[,1],final[,2],colours=final[,3])
plot(final[,1],final[,2],col=final[,3])
warnings()
final[,3] <- as.factor(final[,3])
plot(final[,1],final[,2],col=final[,3])
legend(legend=levels(final[,3]))
levels(final[,3])
class(final[,3])
legend(legend=final[,3])
final[,3]
pallete()
palette()
hc <- hclust(final[,1:2])
hc <- hclust(pca$x[,1:2])
