devtools::document()
rm(list = c("parse", "words"))
devtools::document()
lexicon.english
?lexicon.english
fastmix
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
T <- ksm(M)
BIC <- mclust::mclustBIC(T)
plot(BIC)
mdl <- mclust::Mclust(T, BIC)
mdl <- mclust::Mclust(T, x=BIC)
library(mclust)
mdl <- mclust::Mclust(T, x=BIC)
View(mdl)
summary(mdl)
L <- cbind(rownames(M), mdl$classification, mdl$uncertainty)
View(L)
L <- cbind(rownames(M), kmeans(T, centers=4)$cluster)
mtcars
apply(mtcars,2,function(x) 2*x)
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
L <- kmeans(M,centers=4)$cluster
rownames(L) <- rownames(M)
names(L) <- rownames(M)
B <- bigrams(daai.chin$gloss, sentence.separators=TRUE)
C <- apply(B,2,function(x) 1)
C <- apply(B,2,function(x) x)
C <- apply(B,2, function(x) L[x])
View(C)
View(B)
View(C)
View(B)
View(C)
table(C)
plot(C[,1],C[,2])
C <- as.factor(C)
C <- apply(B,2, function(x) L[x])
F <- as.dataframe(C)
F <- as.data.frame(C)
F$i__ <- as.factor(F$i__)
F$j__ <- as.factor(F$j__)
View(`F`)
table(F)
heatmap(table(F))
L[L==2]
L[L==4]
D <- morphs(daai.chin)
D <- morphs(daai.chin$language)
table(D)
d <- table(D)
max(d)
names(d)
sort(d)
hist(d)
sum(d)
hist(d/sum(d))
hist(log(d/sum(d),2))
log(c(1:length(d))*log(length(D),2),2)
lexicon.daaichin <- log(c(1:length(d))*log(length(D),2),2)
names(lexicon.daaichin) <- names(d)
names(lexicon.daaichin) <- names(sort(d,decreasing=TRUE))
names(lexicon.daaichin)
which(max(d))
which(d==max(d))
which(d==min(d))
which(d==min(lexicon.daaichin))
which(lexicon.daaichin==min(lexicon.daaichin))
which(lexicon.daaichin==max(lexicon.daaichin))
daai.chin$language[1]
parse(lexicon.daaichin,"kaamnglaamxangÃ¼")
parse(lexicon.daaichin,"kaam")
parse(lexicon.daaichin,"xakanglaam")
hist(lexicon.daaichin)
hist(lexicon.english)
devtools::document()
usethis::use_data(lexicon.daaichin)
devtools::document()
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
L <- lexicon(morphs(daai.chin$language, sentence.separators = FALSE))
Dm <- morphs(daai.chin$language)
Dm <- morphs(daai.chin$language, sentence.separators = FALSE)
Dm <- table(Dm)
Dm <- sort(table(Dm), decreasing=TRUE)
Dm
Dm <- table(Dm)
sort(Dm, decreasing=TRUE)
Dm <- morphs(daai.chin$language, sentence.separators = FALSE)
Dm <- table(Dm)
sort(Dm, decreasing=TRUE)
length(sort(Dm, decreasing=TRUE))
devtools::load_all()
L <- lexicon(daai.chin$language)
L <- lexicon(morphs(daai.chin$language))
min(L)
which(L==min(L))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
L == lexicon.daaichin
sum(L == lexicon.daaichin)
L <- lexicon(morphs(daai.chin$language),zipf=FALSE)
L
min(L)
max(L)
sort(L, decreasing=TRUE))
sort(L, decreasing=TRUE)
sort(L)
lexicon.daaichin == sort(L)
sum(lexicon.daaichin == sort(L))
abs(lexicon.daaichin - sort(L))
devtools::load_all()
L <- lexicon(morphs(daai.chin$language))
mean(L==lexicon.daaichin)
D <- lexicon(morphs(daai.chin$language),zipf=FALSE)
mean(L==D)
D <- morphs(daai.chin$language)
sapply(D, function(x) sum(x))
sapply(D, function(x) sum(x==x))
sapply(D, function(x) sum(D==x))
max(sapply(D, function(x) sum(D==x)))
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
adjacency_matrix((bigrams(daai.chin$gloss, sentence.separators=TRUE)))
D <- adjacency_matrix((bigrams(daai.chin$gloss, sentence.separators=TRUE)))
L <- lexicon(morphs(daai.chin$gloss))
hist(L)
sum(L < 10)
sum(L < 12)
sum(L < 10)
which(L < 10)
names(which(L < 10))
D[,-names(which(L<10))]
D[,-1]
which(L <10)
names(which(L <10))
colnames(D) == names(which(L<10))
which(colnames(D) == names(which(L<10)))
colnames(D)
colnames(D)['NON']
colnames(D) == names(L)
which(colnames(D) == 'NON')
which(colnames(D) == names(L)[1])
which(colnames(D) == names(which(L<10))[1])
which(colnames(D) == names(which(L<10))[10])
which(colnames(D) == names(which(L<10)))
match(colnames(D) == names(which(L<10)))
colnames(D)
colnames(D)['NON']
colnames(D)[colnames(D) == 'NON']
sapply(colnames(D), function(x) {if(x %in% names(L < 10)) return(x)})
R <- sapply(colnames(D), function(x) {if(x %in% names(L < 10)) return(x)})
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) return(x))
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) x); unlist()
R <- sapply(colnames(D), function(x) if(x %in% names(L < 10)) return(x)); unlist()
intersect(colnames(D), mames(L <10))
intersect(colnames(D), names(L <10))
intersect(colnames(D), names(which(L < 10)))
R <- intersect(colnames(D), names(which(L < 10)))
D[,-R]
D[,R]
D2 <- D[,R]
View(D2)
dim(D2)
ksm(D2)
K <- ksm(D2)
kme <- kmeans(D, centers=5)$cluster
View(kme)
db <- dbscan::dbscan(D2,eps=200)
View(db$cluster)
db <- dbscan::dbscan(D2,eps=2)
View(db$cluster)
pca <- prcomp(D2)
kme <- kmeans(D2, centers=5)$cluster
View(kme)
plot(pca$x[,1:2])
plot(pca$x[,1:3])
plot(pca$x[,2:3])
kme <- kmeans(pca$x[,1:2], centers=5)
kme[1]
kme$cluster[1]
rownames(pca$x)
rownames(pca$x)[1]
final <- cbind(pca$x[,2], kme$cluster)
plot(final[,1],final[,2],colours=final[,3])
final <- cbind(pca$x[,1:2], kme$cluster)
plot(final[,1],final[,2],colours=final[,3])
plot(final[,1],final[,2],col=final[,3])
warnings()
final[,3] <- as.factor(final[,3])
plot(final[,1],final[,2],col=final[,3])
legend(legend=levels(final[,3]))
levels(final[,3])
class(final[,3])
legend(legend=final[,3])
final[,3]
pallete()
palette()
hc <- hclust(final[,1:2])
hc <- hclust(pca$x[,1:2])
devtools::load_all()
parse(lexicon.english,"mynameismud")
devtools::load_all()
parse(lexicon.english,"mynameismud")
parse(lexicon.english,"thedukeandduchessofwindor's1937")
parse(lexicon.english,"thedukeandduchessofwindsors1937")
parse(lexicon.english,"thedukeandduchessofwindsors")
sent <- parse(lexicon.english,"thedukeandduchessofwindsorspalace")
sum(sent$plogs)
tolower("AA")
unique(c(1,1,2,3,3,3,4))
strsplit("iam;another;man.that.sings,for,you.then","[.;,")
strsplit("iam;another;man.that.sings,for,you.then","[.;,]")
strsplit("aaa","")
strsplit(c("aaa","bbb"),"")
unlist(strsplit(c("aaa","bbb"),""))
unlist(strsplit("iam;another;man.that.sings,for,you.then","[.;,]"))
unique(unlist(strsplit(c("aaa","bbb"),"")))
devtools::load_all()
dm.chunker("Well, that was a bad time for him")
devtools::load_all()
dm.chunker("Well, that was a bad time for him")
dm_chunker("Well, that was a bad time for him")
dm_chunker("Note that this means that if there is a match at the beginning of a (non-empty) string, the first element of the output is "", but if there is a match at the end of the string, the output is the same as with the match removed.
Invalid inputs in the current locale are warned about up to 5 times.")
dm_chunker("Note that this means that if there is a match at the beginning of a (non-empty) string, the first element of the output is "", but if there is a match at the end of the string, the output is the same as with the match removed.
Invalid inputs in the current locale are warned about up to 5 times.")
dm_chunker("Note that this means that if there is a match at the beginning of a (non-empty) string, the first element of the output is empty, but if there is a match at the end of the string, the output is the same as with the match removed.
Invalid inputs in the current locale are warned about up to 5 times.")
d <- dm_chunker("Note that this means that if there is a match at the beginning of a (non-empty) string, the first element of the output is empty, but if there is a match at the end of the string, the output is the same as with the match removed.
Invalid inputs in the current locale are warned about up to 5 times.")
sum(d)
list(d)
list(d=d)
t<-list(d=d)
t$d
t$e <- c(1,2,4,5)
t
t$e
t$d
strsplit("ef")
strsplit("ef","")
unlist(strsplit("ef",""))
d(unlist(strsplit("ef","")))
d[unlist(strsplit("ef",""))]
m <- function(mult) sum(d[unlist(strsplit(mult,""))])
m("efent")
d
5*4.75
m("efent-nefent")
m("efent-nefent(haaiaaa)")
tst <- d
tst['k'] <- 22.3
tst
tst['o'] <- tst['k']
tst
tst <- tst[-'k']
tst <- tst[-which(tst['k'])]
which(tst(names) == 'k')
which(names(tst) == 'k')
tst <- tst[-which(names(tst) == 'k')]
tst
tst <- tst[-which(names(tst) == 'o')]
tst
sapply("Hello.I am a crayon.", parse(), lexicon=d)
prs <- function(x) parse(d,x)
prs("als")
prs("alsa")
sapply("Hello.I am a crayon.", prs())
sapply(c("hello", "i am a crayon"), prs())
apply(c("hello", "i am a crayon"), prs())
apply(c("hello", "i am a crayon"), 1,prs())
prs <- function(x) parse(d,x)$tokens
prs("ala")
apply(c("hello", "i am a crayon"), 1,prs())
sapply(c("hello", "i am a crayon"), 1,prs())
sapply(c("hello", "i am a crayon"), prs())
lapply(c("hello", "i am a crayon"), prs())
prs("i am a crayon")
sum(prs("i am a crayon" == "a"))
sum(prs("i am a crayon") == "a")
sum(prs("i am a crayon") == "a")/nchar(prs("i am a crayon"))
sum(prs("i am a crayon") == "a")/length(prs("i am a crayon"))
sapply(d, function(x) sum(prs("i am a cryon" == x)))
sapply(d, function(x) sum(prs("i am a cryon") == x))
sapply(prs("i am a crayon"), function(x) sum(x == d))
apply(prs("i am a crayon"),1, function(x) sum(x == d))
sapply(prs("i am a crayon"), function(x) sum(x == names(d)))
sapply(names(d), function(x) sum(prs("i am a crayon") == x))
sapply(names(d), function(x) sum(prs("i am a crayon") == x)/nchar("i am a crayon"))
for(i in names(d)) print(i)
m <- c()
m <- c(m, prs("i am me"))
m <- c(m, prs("i am a lit"))
m
lexicon(m, zipf=FALSE)
sapply(m, function(x) d[x])
sum(sapply(m, function(x) d[x]))
devtools::load_all()
dm_chunker("The green fox jumped in my garden.She was so cute")
g <- dm_chunker("The green fox jumped in my garden.She was so cute")
View(g)
View(g)
devtools::load_all()
g <- dm_chunker("The green fox jumped in my garden.She was so cute")
View(g)
View(g)
sum(g$alphabet)
sum(g$alphabet.cost)
devtools::load_all()
g <- dm_chunker("The green fox jumped in my garden.She was so cute")
View(g)
View(g)
grammar$dl == grammar$u + grammar$alphabet
g$dl == g$u + g$alphabet
g$dl == g$u + sum(g$alphabet)
g <- dm_chunker("theredfoxmetmydoginthegarden,shewassmilingwhilehewasbarking")
View(g)
devtools::load_all()
g <- dm_chunker("theredfoxmetmydoginthegarden,shewassmilingwhilehewasbarking")
View(g)
devtools::load_all()
devtools::load_all()
g <- dm_chunker("This is my good dog, he loves barking at the mail guy.")
View(g)
g$parse
as.integer(.25*87)
as.integer(.25*3)
as.integer(.25*4)
as.integer(.25*5)
as.integer(.25*6)
paste(m,m)
paste(m,m,sep="")
rbind(d,d)
c(d,d)
paste(g$parse[-length(g$parse)],g$parse[-1],sep="")
b<-paste(g$parse[-length(g$parse)],g$parse[-1],sep="")
b
lexicon(b, zipf=FALSE)
b<-paste(b[-length(b)],b[-1],sep="")
b
lexicon(b, zipf=FALSE)
length(b)
.25 * length(b)
ceil(.25 * length(b))
ceiling(.25 * length(b))
ceiling(.25 * length(lexicon(b)))
b[intersect(names(b), c("loov","maai"))]
lexicon(b)[intersect(b,c("loov","maai"))]
l <- lexicon(b)
l
nchar(names(l))
nchar(names(l)) * d
nchar(names(l)) * d[1]
c <- nchar(names(l)) * d[1]
names(c) <- names(l)
c
l
c(t,t)
c(t,t)[1]
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
View(g)
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
c(g$alphabet,g$alphabet.cost)
class(c(g$alphabet,g$alphabet.cost))
names(c(g$alphabet,g$alphabet.cost))
is.null(names(c(g$alphabet,g$alphabet.cost)))
is.null(names(c(g$alphabet,c())))
is.null(names(c(g$alphabet,c(), g$alphabet)))
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
devtools::load_all()
dm_chunker("I am a red fox")
at <- dm_chunker("I am a red fox")
View(at)
dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
View(at)
devtools::load_all()
at <- dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
devtools::load_all()
at <- dm_chunker("I am a red fox")
View(at)
devtools::load_all()
at <- dm_chunker("I am a red fox")
union(c(1,2), 1)
union(c(1,2), 3)
union(c(1,2), c(3,4))
union(c(1,2), c())
devtools::load_all()
at1 <- dm_chunker("I am a red fox")
at <- dm_chunker("I am a red fox")
c(NULL)
c(1,NULL)
c(1,NULL,NULL,3)
devtools::load_all()
at1 <- dm_chunker("I am a red fox")
View(at1)
devtools::load_all()
View(at1)
View(at1)
devtools::load_all()
at1 <- dm_chunker("I am a red fox")
View(at1)
devtools::load_all()
at1 <- dm_chunker("I am a red fox")
devtools::load_all()
at1 <- dm_chunker("I am a red fox")
View(at1)
devtools::load_all()
dm_chunker("I am a red fox")
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
paste(c("a","a"))
paste(c("a","a"),collapse='')
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
devtools::load_all()
dm_chunker("I am a red fox and you are a white polar fox")
at <- dm_chunker("I am a red fox and you are a white polar fox")
View(at)
devtools::load_all()
at <- dm_chunker("I am a red fox and you are a white polar fox")
View(at)
c(1,2,3)[-2:]
c(1,2,3)[-2:-1
]
c(1,2,3)[-c(3,2)]
c(1,2,3)[1:length(c(1,2,3)-2)
)
c(1,2,3)[1:length(c(1,2,3)-2)]
c(1,2,3)[1:length(c(1,2,3))-2]
c(1,2,3)[1:(length(c(1,2,3))-2)]
c(1,2,3)[1:(length(c(1,2,3))-3)]
c(1,2,3)[1:(length(c(1,2,3))-1)]
devtools::load_all()
at <- dm_chunker("I am a red fox and you are a white polar fox")
View(at)
at <- dm_chunker("Where have you been, good people")
View(at)
at <- dm_chunker(" Ah, estÃ¡ bom. EntÃ£o a casa, local que nÃ³s usamos para, para moradia, nÃ©, entÃ£o para a pessoa ter uma casa Ã© necessÃ¡rio naturalmente que a pessoa tenha dinheiro pra poder alugar ou comprar uma casa, nÃ©? Se a pessoa quiser alugar uma casa, naturalmente essa casa que a pessoa vai residir nÃ£o serÃ¡ sua. Agora se a pessoa quiser adquirir uma casa, poderÃ¡ adquirir uma casa ou a casa jÃ¡ pronta ou entÃ£o a pessoa terÃ¡ que planejar uma casa para si. EntÃ£o nesse caso a pessoa procurarÃ¡ um engenheiro, um arquiteto, uma pessoa qualquer que faÃ§a um projeto, faÃ§a uma planta da casa e a pessoa irÃ¡ dizendo como que quererÃ¡ ter a orientaÃ§Ã£o dos cÃ´modos, do quarto, a sala, tudo direitinho, nÃ©? Uma vez essa planta sendo aprovada pela pessoa entÃ£o irÃ¡ ser feita a sondagem do terreno e uma vez feita a sondagem do terreno serÃ¡ delimitado o local da construÃ§Ã£o da casa, serÃ¡ feita a escavaÃ§Ã£o do terreno para ser feito o alicerce da casa, nÃ©? Os materiais mais usados entÃ£o na construÃ§Ã£o da casa, seja na fundaÃ§Ã£o da casa, seja no levantamento das paredes, nÃ³s temos como os principais materiais das casas, digamos assim, que usamos nas cidades, nÃ©, eh, seriam o cimento, a pedra, areia, isso para fazer argamassa para os alicerces da casa e para juntar os tijolos da casa, nÃ©? Os tijolos teriam como finalidade o levantamento das paredes da casa e terÃ­amos tambÃ©m a parte do madeiramento que seria feito na parte alta da casa, da cumeeira e caibros, ripas, outros tipos de madeira para sustentar o telhado, o qual naturalmente seria constituÃ­do de telhas, nÃ©? Teria tambÃ©m entÃ£o o madeirame para as portas, janelas e tacos. Depois de tudo isso feito, nÃ©, a casa, naturalmente vocÃª teria o reboco interno, cimento, nÃ©, a casa seria entÃ£o pintada, nÃ©, convenientemente de acordo com as tintas que a pessoa gostasse. EntÃ£o uma vez pronta a casa, pronta a casa, ela estaria em condiÃ§Ãµes de ser habitada. Agora quanto aos tipos de casas naturalmente elas variam muito. Existem casas de estilo colonial, casas de estilo mais antigo, casas de estilo moderno, casas com ... Que usam muitos vi... vidros, com varandas envidraÃ§adas, casas com terreno grande que se pode fazer por exemplo outros alojamentos e piscinas, existem casas em estilo normando, com aquele telhado tipo que se usa na Europa pra escorrer a neve e finalmente existem modelos interessantÃ­ssimos, casas modernas e tem pessoas que tÃªm muito cuidado e apuro em planejar a sua casa como se fosse inclusive muitas vezes um objeto de arte, nÃ©, tem todo um esmero nÃ£o sÃ³ na parte externa da casa, na sua apresentaÃ§Ã£o, como em TeresÃ³polis, por exemplo, tive oportunidade de ver casas muito bonitas, nÃ©, usando madeira, tipos de madeira envernizada, que lembra as casas europÃ©ias e sÃ£o casas muito agradÃ¡veis da pessoa ver, a prÃ³pria pessoa que passa na rua, olha essas casas e vÃª elas assim numa, como se estivesse admirando mesmo assim um, um objeto de arte. Se a pessoa penetrar entÃ£o no interior dessas casas, vai ver que o dono muitas vezes tem gosto entÃ£o em decorÃ¡-la, em decorÃ¡-las e a decoraÃ§Ã£o Ã© a mais diversa possÃ­vel. Pode ser muito sofisticada, pode ser mais singela. Existem muitas decoraÃ§Ãµes singelas, simples mas que sÃ£o feitas com bom gosto e chamam bastante a atenÃ§Ã£o. E afinal de contas quando a pessoa tem posse e bom gosto a pessoa sabe se cercar de conforto, nesse caso, e beleza ao mesmo tempo, podendo chegar muitas vezes aos requintes mÃ¡ximos do comodismo.")
View(at)
at$10$parse
at[[10]]$parse
paste(at[[10]]$parse, collapse=' ')
devtools::load_all()
dm_chunker("acasademaria")
devtools::load_all()
dm_chunker("acasademaria")
a <- dm_chunker("acasademaria")
View(a)
devtools::load_all()
a <- dm_chunker("acasademaria")
devtools::load_all()
a <- dm_chunker("acasademaria")
View(a)
devtools::load_all()
a <- dm_chunker("acasademaria")
View(a)
at <- dm_chunker(" Ah, estÃ¡ bom. EntÃ£o a casa, local que nÃ³s usamos para, para moradia, nÃ©, entÃ£o para a pessoa ter uma casa Ã© necessÃ¡rio naturalmente que a pessoa tenha dinheiro pra poder alugar ou comprar uma casa, nÃ©? Se a pessoa quiser alugar uma casa, naturalmente essa casa que a pessoa vai residir nÃ£o serÃ¡ sua. Agora se a pessoa quiser adquirir uma casa, poderÃ¡ adquirir uma casa ou a casa jÃ¡ pronta ou entÃ£o a pessoa terÃ¡ que planejar uma casa para si. EntÃ£o nesse caso a pessoa procurarÃ¡ um engenheiro, um arquiteto, uma pessoa qualquer que faÃ§a um projeto, faÃ§a uma planta da casa e a pessoa irÃ¡ dizendo como que quererÃ¡ ter a orientaÃ§Ã£o dos cÃ´modos, do quarto, a sala, tudo direitinho, nÃ©? Uma vez essa planta sendo aprovada pela pessoa entÃ£o irÃ¡ ser feita a sondagem do terreno e uma vez feita a sondagem do terreno serÃ¡ delimitado o local da construÃ§Ã£o da casa, serÃ¡ feita a escavaÃ§Ã£o do terreno para ser feito o alicerce da casa, nÃ©? Os materiais mais usados entÃ£o na construÃ§Ã£o da casa, seja na fundaÃ§Ã£o da casa, seja no levantamento das paredes, nÃ³s temos como os principais materiais das casas, digamos assim, que usamos nas cidades, nÃ©, eh, seriam o cimento, a pedra, areia, isso para fazer argamassa para os alicerces da casa e para juntar os tijolos da casa, nÃ©? Os tijolos teriam como finalidade o levantamento das paredes da casa e terÃ­amos tambÃ©m a parte do madeiramento que seria feito na parte alta da casa, da cumeeira e caibros, ripas, outros tipos de madeira para sustentar o telhado, o qual naturalmente seria constituÃ­do de telhas, nÃ©? Teria tambÃ©m entÃ£o o madeirame para as portas, janelas e tacos. Depois de tudo isso feito, nÃ©, a casa, naturalmente vocÃª teria o reboco interno, cimento, nÃ©, a casa seria entÃ£o pintada, nÃ©, convenientemente de acordo com as tintas que a pessoa gostasse. EntÃ£o uma vez pronta a casa, pronta a casa, ela estaria em condiÃ§Ãµes de ser habitada. Agora quanto aos tipos de casas naturalmente elas variam muito. Existem casas de estilo colonial, casas de estilo mais antigo, casas de estilo moderno, casas com ... Que usam muitos vi... vidros, com varandas envidraÃ§adas, casas com terreno grande que se pode fazer por exemplo outros alojamentos e piscinas, existem casas em estilo normando, com aquele telhado tipo que se usa na Europa pra escorrer a neve e finalmente existem modelos interessantÃ­ssimos, casas modernas e tem pessoas que tÃªm muito cuidado e apuro em planejar a sua casa como se fosse inclusive muitas vezes um objeto de arte, nÃ©, tem todo um esmero nÃ£o sÃ³ na parte externa da casa, na sua apresentaÃ§Ã£o, como em TeresÃ³polis, por exemplo, tive oportunidade de ver casas muito bonitas, nÃ©, usando madeira, tipos de madeira envernizada, que lembra as casas europÃ©ias e sÃ£o casas muito agradÃ¡veis da pessoa ver, a prÃ³pria pessoa que passa na rua, olha essas casas e vÃª elas assim numa, como se estivesse admirando mesmo assim um, um objeto de arte. Se a pessoa penetrar entÃ£o no interior dessas casas, vai ver que o dono muitas vezes tem gosto entÃ£o em decorÃ¡-la, em decorÃ¡-las e a decoraÃ§Ã£o Ã© a mais diversa possÃ­vel. Pode ser muito sofisticada, pode ser mais singela. Existem muitas decoraÃ§Ãµes singelas, simples mas que sÃ£o feitas com bom gosto e chamam bastante a atenÃ§Ã£o. E afinal de contas quando a pessoa tem posse e bom gosto a pessoa sabe se cercar de conforto, nesse caso, e beleza ao mesmo tempo, podendo chegar muitas vezes aos requintes mÃ¡ximos do comodismo.")
View(at)
