install.packages("available")
available::available("ocunR")
6 %% 3 != 0
6 %% 4 != 0
devtools::load_all()
sbzz <- read.txt('sbzz.txt')
sbzz <- read.txt('sbzz.txt')
View(sbzz)
load_all()
devtools::load_all()
sbzz <- read.txt('sbzz.txt')
View(sbzz)
devtools::load_all()
sbzz <- read.txt('sbzz.txt')
View(sbzz)
sbzz <- read.txt('sbzz.txt')
devtools::load_all()
sbzz <- read.txt('sbzz.txt')
stringr::str_replace_all("ama ama  ama     ama",\\s,"-")
stringr::str_replace_all("ama ama  ama     ama","\\s","-")
stringr::str_replace_all("ama ama  ama     ama","\\s"," ")
stringr::str_replace_all("ama ama  ama     ama","\\s+"," ")
stringr::str_replace_all("ama ama  ama     ama","\\s+","-")
devtools::load_all()
morphs(sbzz$language)
devtools::load_all()
morphs(sbzz$language)
usethis::use_pipe()
devtools::document()
morphs(sbzz$language)
usethis::use_pipe()
devtools::load_all()
morphs(sbzz$language)
zz <- morphs(sbzz$gloss,sentence.separators = TRUE)
length(sbzz$language)
seq(1,387,"##")
type
class
class(sbzz$language)
devtools::load_all()
zz <- morphs(sbzz$gloss,sentence.separators = TRUE)
devtools::load_all()
zz <- morphs(sbzz$gloss,sentence.separators = TRUE)
devtools::load_all()
zz <- morphs(sbzz$gloss,sentence.separators = TRUE)
View(zz)
View(sbzz)
devtools::load_all()
zz <- morphs(sbzz$gloss,sentence.separators = TRUE)
View(sbzz)
read_txt('sbzz.txt')
sbzz <- read_txt('sbzz.txt')
devtools::load_all()
read_txt('sbzz.txt')
devtools::load_all()
read_txt('sbzz.txt')
sbzz <- read_txt('sbzz.txt')
View(sbzz)
m <- morphs(sbzz$language, sentence.separators = TRUE)
View(sbzz)
sbzz <- read_txt('sbzz.txt')
?morphs
devtools::document()
sbzz <- read_txt('sbzz.txt')
w <- words(sbzz$language)
w
devtools::load_all()
bigrams(sbzz$gloss)
bigrams(sbzz$gloss,morphs=FALSE)
devtools::load_all()
b <- bigrams(sbzz$language, words=TRUE)
b <- bigrams(sbzz$language, morphs=FALSE)
View(b)
View(sbzz)
devtools::load_all()
b <- bigrams(sbzz$language, morphs=FALSE)
b <- bigrams(sbzz$language, morphs=FALSE, sentence.separators=TRUE)
devtools::load_all()
b <- bigrams(sbzz$language, morphs=FALSE, sentence.separators=TRUE)
View(b)
devtools::load_all()
b <- bigrams(sbzz$language, morphs=FALSE, sentence.separators=TRUE)
devtools::load_all()
b <- bigrams(sbzz$language, morphs=FALSE)
b <- bigrams(sbzz$language, morphs=FALSE, sentence.separators = TRUE)
devtools::document()
devtools::check()
usethis::use_gpl3_license()
devtools::check()
devtools::load_all()
bigrams(c("wawaw","asd asdasd","asd asd asd as asd asd"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
daai.chin <- read_txt('daaichin.txt')
usethis::use_data(daai.chin)
usethis::use_data(daai.chin, internal=TRUE)
devtools::document()
rm(list = c("daai.chin"))
devtools::document()
daai.chin
adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
adjacency_matrix(bigrams(daai.chin$gloss))
D <- adjacency_matrix(bigrams(daai.chin$gloss))
View(D)
adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
D <- adjacency_matrix(bigrams(daai.chin$gloss))
View(D)
devtools::load_all()
D <- adjacency_matrix(bigrams(daai.chin$gloss))
D <- adjacency_matrix(bigrams(daai.chin$gloss), left=TRUE)
View(D)
devtools::document()
iris
tapply(iris$Sepal.Length,iris$Species,median)
sapply(iris[,-5],sum)
sapply(iris[,-5],log(base=2))
sapply(iris[,-5],log2)
apply(iris[,-5], c(1,2),sum)
apply(iris[,-5], 1,sum)
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss))
View(D)
D[1,1]
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss))
View(D)
Dt <- t(D)
NID(D[1,],Dt[1,])
aricode::NID(D[1,],Dt[1,])
length(D[1,])
length(Dt[1,])
length(Dt[,1])
aricode::NID(D[1,],Dt[,1])
aricode::NID(D[2,],Dt[,1])
aricode::NID(D[3,],Dt[,1])
aricode::NID(D[4,],Dt[,1])
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
size(D)
dim(D)
aricode::NID(D[1,],D[,1])
apply(D,1,aricode::NID,c2=D[,1])
Dt <- cbind(D, D[,1])
D[,1] == D[,ncol(D)]
Dt[,1] <- Dt[,2]
Dt[,1] == Dt[,2]
eye(3)
ones(3)
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
install.packages("geosphere")
geosphere::distm(D)
dist(D)
D <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
d <- dist(as.matrix(D[,-1]))
d
d[1,1]
d <- as.matrix(d)
View(d)
heatmap
heatmap(d)
colnames(d) <- colnames(D[,-1])
View(d)
rownames(d) <- D[,1]
nrow(d)
D[,1]
rownames(d) <- as.character(D[,1])
rownames(d)
as.character(D[,1])
length(as.character(D[,1]))
length(as.vector(D[,1]))
D[,1]
D$i__
rownames(d) <- D$i__
View(d)
kmeans(d, centers=5)
K <- kmeans(d, centers=5)
K$cluster
cbind(D$i__,K$cluster)
L<-cbind(D$i__,K$cluster)
View(L)
install.packages("dbscan")
B <- dbscan::dbscan(d)
B <- dbscan::hdbscan(d,minPts=1)
B <- dbscan::hdbscan(d,minPts=2)
M <- cbind(D$i__,B$cluster)
View(M)
View(B)
plot(B$hc)
M <- cbind(D$i__,B$cluster,B$membership_prob)
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss,sentence.separators = TRUE))
devtools::load_all()
D <- NID_matrix(bigrams(daai.chin$gloss,sentence.separators = TRUE))
install.packages("Spectrum")
M <- Spectrum::(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE)))
M <- Spectrum::Spectrum(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE)))
M <- Spectrum::Spectrum(adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))[,-1])
M$assignments
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE))
View(M)
phi(c(30,20,20,30))
D <- dist(M, method="binary")
D <- dist(M[,-1], method="binary")
d <- as.matrix(D)
View(d)
kmeans(d, centers=5)
kmeans(d, centers=5)$size
k <- kmeans(d, centers=8)$size
k <- kmeans(d, centers=8)
view(cbind(M[,1],k$cluster))
View(cbind(M[,1],k$cluster))
k$size
D <- dist(M[,-1], method="manhattan")
d <- as.matrix(D)
k <- kmeans(d, centers=8)
k$size
View(cbind(M[,1],k$cluster))
M <- adjacency_matrix(bigrams(daai.chin$gloss, sentence.separators=TRUE), binary=FALSE)
D <- dist(M[,-1], method="manhattan")
k <- kmeans(d, centers=8)
View(cbind(M[,1],k$cluster))
sum(c(.3*log(.3),.6*log(.6),.1*log(.1)))
sum(c(.8*log(.3),.1*log(.6),.1*log(.1)))
sum(c(.8*log(.3),.1*log(.6),.05*log(.05),.05*log(.05)))
sum(c(.8*log(.3),.1*log(.1),.05*log(.05),.05*log(.05)))
sum(c(.8*log(.3),.1*log(.1),.1*log(.1)))
sum(c(.5*log(.5),.5*log(.5)))
sum(c(.5*log(2,.5),.5*log(2,.5)))
H <- function(list){}
H <- function(list) -list*log(2,list)
H(c(.5,.5))
H(c(.5,.4,.1))
H <- function(list) sum(-list*log(2,list))
H(c(.5,.2,.3))
H(c(.5,.4,.1))
H(c(.6,.3,.1))
H(c(.25,.25,.25))
H(c(.25,.25,.25,.25))
H(c(.5,.5))
H <- function(list) -sum(list*log(2,list))
H(c(.25,.25,.25,.25))
H(c(.1))
H(c(1))
H(c(.8,.2))
H(c(.5,.5))
H(.5)
H(.25)
log(2,.5)
log(2,.25)
H <- function(list) -sum(list*log(list,2))
H(.5)
H(.5,.5)
H(c(.5,.5))
H(c(.3,.6,.1))
H(c(1/3,1/3,1/3))
H(c(.25,.25,.25,.25))
H(c(.8,.1,.05,.05))
H(c(.3,.1,.05,.05,.05,.05,.1,.1,.05,.05))
4*log(.25,2)/4
sum(log(.3,2),log(.6,2),log(.1,2))/3
-sum(log(.3,2),log(.6,2),log(.1,2))/3
2**-1*log(.5,2)
-2**-1*log(.5,2)
-2**-1*1
H <- function(l) {ent(l)}
H(5)
devtools::document()
devtools::document()
devtools::document()
M <- adjacency_matrix(bigrams(daai.chin$gloss))
devtools::load_all()
M <- adjacency_matrix(bigrams(daai.chin$gloss))
View(M)
devtools::document()
devtools::install()
devtools::install()
devtools::install()
detach("fansi", unload=TRUE)
devtools::install()
